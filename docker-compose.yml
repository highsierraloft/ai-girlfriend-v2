services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_girlfriend}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - HF_ENDPOINT=${HF_ENDPOINT}
      - HF_API_KEY=${HF_API_KEY}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-ai_girlfriend}
      - REDIS_URL=redis://redis:6379/0
      - SCHEDULE_TIMEZONE=Europe/Kyiv
      - FREE_DAILY_LOANS=10
      - RATE_LIMIT_PER_USER_SEC=3
      - HF_MAX_RPS=5
    volumes:
      - ./app:/app/app  # Mount to correct location for development
    ports:
      - "8000:8000"
    command: python -m bot

volumes:
  postgres_data: 